# -*- coding: utf-8 -*-
"""data_extraction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nSJYOLa2nKlvcQOxQTgUHKrOcZ8Vr0nG
"""

import base64
import os
import re
import sqlite3

from googleapiclient.discovery import build
from google.oauth2 import service_account
from sqlalchemy import create_engine, Column, Integer, String, ForeignKey, Text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

# define the SQLAlchemy database engine
engine = create_engine('sqlite:///gmail.db', echo=True)

# create a session factory
Session = sessionmaker(bind=engine)

# create a declarative base
Base = declarative_base()

# define the database models
class Email(Base):
    __tablename__ = 'emails'

    id = Column(Integer, primary_key=True)
    sender = Column(String)
    subject = Column(String)
    body = Column(Text)
    urls = Column(Text)
    attachments = Column(Text)


# authenticate with Google using the service account
credentials = service_account.Credentials.from_service_account_file(
    'path/to/service/account/credentials.json',
    scopes=['https://www.googleapis.com/auth/gmail.readonly'])

# create a Gmail API client
service = build('gmail', 'v1', credentials=credentials)

# get the list of messages in the inbox
result = service.users().messages().list(userId='me').execute()
messages = result.get('messages', [])

# loop over each message and store the extracted information in the database
for message in messages:
    msg = service.users().messages().get(userId='me', id=message['id']).execute()
    headers = msg['payload']['headers']
    subject = ''
    sender = ''
    body = ''
    urls = []
    attachments = []
    for header in headers:
        if header['name'] == 'Subject':
            subject = header['value']
        elif header['name'] == 'From':
            sender = header['value']
    # extract the email content
    parts = msg['payload']['parts']
    if parts:
        for part in parts:
            part_headers = part['headers']
            part_type = part['mimeType']
            part_body = part['body']
            if 'text/plain' in part_type:
                body = base64.urlsafe_b64decode(part_body['data']).decode('utf-8')
                # extract the URLs present in the email content
                urls = re.findall("(?P<url>https?://[^\s]+)", body)
            elif 'multipart' in part_type:
                # loop over each part in the multipart message and extract the attachments
                sub_parts = part['parts']
                if sub_parts:
                    for sub_part in sub_parts:
                        filename = sub_part.get('filename')
                        if filename:
                            attachment_data = sub_part['body']['data']
                            attachment = base64.urlsafe_b64decode(attachment_data.encode('UTF-8'))
                            attachments.append({'filename': filename, 'attachment': attachment})
    # create a new email object
    email = Email(sender=sender, subject=subject, body=body, urls=str(urls), attachments=str(attachments))
    # add the email object to the database session
    session = Session()
    session.add(email)
    session.commit()